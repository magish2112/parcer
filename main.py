#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import sys
import os
import time
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent / "src"))

from src.utils.config import get_config, get_api_credentials
from src.utils.logging import setup_logging, get_logger
from src.utils.monitoring import TradingMonitor
from src.data.data_loader import DataLoader
from src.env.trading_env import OptimizedTradingEnv
from src.models.ppo_model import PPOModel
from api import get_bybit_client
from trade import market_buy, market_sell


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Crypto Trading Bot')
    parser.add_argument('--config', type=str, default='config/trading_config.yaml',
                       help='Path to config file')
    parser.add_argument('--mode', type=str, choices=['train', 'trade', 'test'], 
                       default='trade', help='Mode: train, trade, or test')
    parser.add_argument('--model-path', type=str, default='ppo_model.zip',
                       help='Path to model file')
    parser.add_argument('--data-path', type=str, default=None,
                       help='Path to data file')
    
    args = parser.parse_args()
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_config(args.config)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger = setup_logging(config.logging, "main")
        logger.info("Starting Crypto Trading Bot")
        logger.info(f"Mode: {args.mode}")
        logger.info(f"Config: {args.config}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitor = TradingMonitor(config.monitoring)
        
        if args.mode == 'train':
            train_mode(config, args, logger, monitor)
        elif args.mode == 'trade':
            trade_mode(config, args, logger, monitor)
        elif args.mode == 'test':
            test_mode(config, args, logger, monitor)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Bot stopped by user")
    except Exception as e:
        print(f"‚ùå Error: {e}")
        if 'logger' in locals():
            logger.error(f"Fatal error: {e}", exc_info=True)


def train_mode(config, args, logger, monitor):
    """–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è"""
    logger.info("ü§ñ Starting training mode")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data_loader = DataLoader(config.data.__dict__)
        df = data_loader.load_historical_data(args.data_path)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        df_train = data_loader.create_training_data(df)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ä–µ–¥—É
        env = OptimizedTradingEnv(
            df_path='temp_training_data.csv',
            trading_config=config.trading,
            data_config=config.data,
            logging_config=config.logging,
            log_trades_path='training_trades.csv'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        df_train.to_csv('temp_training_data.csv', index=False)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        model_config = config.model.__dict__.copy()
        model_config['model_path'] = args.model_path
        model = PPOModel(model_config)
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        logger.info(f"üéØ Starting training for {config.model.total_timesteps} timesteps")
        
        result = model.train(env, total_timesteps=config.model.total_timesteps)
        
        if result['success']:
            logger.info("‚úÖ Training completed successfully")
            logger.info(f"Model saved to: {result['model_path']}")
        else:
            logger.error(f"‚ùå Training failed: {result['error']}")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists('temp_training_data.csv'):
            os.remove('temp_training_data.csv')
        
    except Exception as e:
        logger.error(f"Error in training mode: {e}", exc_info=True)
        raise


def trade_mode(config, args, logger, monitor):
    """–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    logger.info("üí∞ Starting trading mode")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
        api_key, api_secret = get_api_credentials(config)
        client = get_bybit_client(testnet=config.api.testnet)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        model_config = config.model.__dict__.copy()
        model_config['model_path'] = args.model_path
        model = PPOModel(model_config)
        
        if os.path.exists(args.model_path):
            model.load(args.model_path)
            logger.info(f"‚úÖ Model loaded from {args.model_path}")
        else:
            logger.error(f"‚ùå Model file not found: {args.model_path}")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data_loader = DataLoader(config.data.__dict__)
        df = data_loader.get_ohlcv_from_bybit(
            client, 
            config.trading.symbol, 
            config.data.interval, 
            config.data.limit
        )
        
        if df is None:
            logger.error("‚ùå Failed to load data from Bybit")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ä–µ–¥—É
        env = OptimizedTradingEnv(
            df_path='temp_live_data.csv',
            trading_config=config.trading,
            data_config=config.data,
            logging_config=config.logging,
            log_trades_path='live_trades.csv'
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        df.to_csv('temp_live_data.csv', index=False)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—É
        obs, info = env.reset()
        
        logger.info("üöÄ Starting live trading")
        logger.info(f"Initial balance: {info['balance']:.2f} USDT")
        
        step = 0
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –º–æ–¥–µ–ª–∏
                start_time = time.time()
                action = model.predict(obs)
                prediction_time = time.time() - start_time
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥ –≤ —Å—Ä–µ–¥–µ
                step_start_time = time.time()
                obs, reward, terminated, truncated, info = env.step(action)
                step_time = time.time() - step_start_time
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                monitor.update_trading_metrics(step, info)
                monitor.update_performance_metrics(step, prediction_time, step_time)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if step % 100 == 0:
                    logger.info(f"Step {step}: Balance={info['balance']:.2f}, "
                              f"Position={info['position_size']:.4f}, "
                              f"Profit={info['total_profit']:.4f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                if terminated or truncated:
                    logger.info("Episode finished, resetting environment")
                    obs, info = env.reset()
                
                step += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                time.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞
                
            except KeyboardInterrupt:
                logger.info("Trading stopped by user")
                break
            except Exception as e:
                logger.error(f"Error in trading loop: {e}")
                time.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary = monitor.get_summary()
        logger.info("üìä Final Statistics:")
        logger.info(f"Total steps: {summary.get('total_steps', 0)}")
        logger.info(f"Total trades: {summary.get('total_trades', 0)}")
        logger.info(f"Win rate: {summary.get('win_rate', 0):.1f}%")
        logger.info(f"Total profit: {summary.get('total_profit', 0):.2f} USDT")
        logger.info(f"Final balance: {summary.get('current_balance', 0):.2f} USDT")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        monitor.export_to_csv()
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists('temp_live_data.csv'):
            os.remove('temp_live_data.csv')
        
    except Exception as e:
        logger.error(f"Error in trading mode: {e}", exc_info=True)
        raise


def test_mode(config, args, logger, monitor):
    """–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üß™ Starting test mode")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data_loader = DataLoader(config.data.__dict__)
        df = data_loader.load_historical_data(args.data_path)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ä–µ–¥—É
        env = OptimizedTradingEnv(
            df_path=args.data_path or config.data.dataset_path,
            trading_config=config.trading,
            data_config=config.data,
            logging_config=config.logging,
            log_trades_path='test_trades.csv'
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
        model = None
        if os.path.exists(args.model_path):
            model_config = config.model.__dict__.copy()
            model_config['model_path'] = args.model_path
            model = PPOModel(model_config)
            model.load(args.model_path)
            logger.info(f"‚úÖ Model loaded from {args.model_path}")
        else:
            logger.warning(f"‚ö†Ô∏è  Model file not found: {args.model_path}, using random actions")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—É
        obs, info = env.reset()
        
        logger.info("üß™ Starting backtest")
        logger.info(f"Initial balance: {info['balance']:.2f} USDT")
        
        step = 0
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                if model is not None:
                    action = model.predict(obs)
                else:
                    action = env.action_space.sample()  # –°–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥
                obs, reward, terminated, truncated, info = env.step(action)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                monitor.update_trading_metrics(step, info)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 100 —à–∞–≥–æ–≤
                if step % 100 == 0:
                    logger.info(f"Step {step}: Balance={info['balance']:.2f}, "
                              f"Position={info['position_size']:.4f}, "
                              f"Profit={info['total_profit']:.4f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                if terminated or truncated:
                    break
                
                step += 1
                
            except Exception as e:
                logger.error(f"Error in test loop: {e}")
                break
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary = monitor.get_summary()
        logger.info("üìä Test Results:")
        logger.info(f"Total steps: {summary.get('total_steps', 0)}")
        logger.info(f"Total trades: {summary.get('total_trades', 0)}")
        logger.info(f"Win rate: {summary.get('win_rate', 0):.1f}%")
        logger.info(f"Total profit: {summary.get('total_profit', 0):.2f} USDT")
        logger.info(f"Final balance: {summary.get('current_balance', 0):.2f} USDT")
        logger.info(f"Max drawdown: {summary.get('max_drawdown', 0):.2%}")
        logger.info(f"Sharpe ratio: {summary.get('sharpe_ratio', 0):.3f}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        monitor.export_to_csv()
        
    except Exception as e:
        logger.error(f"Error in test mode: {e}", exc_info=True)
        raise


if __name__ == '__main__':
    main()
