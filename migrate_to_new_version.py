#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
"""

import os
import shutil
import pandas as pd
from pathlib import Path
import yaml


def backup_old_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    backup_dir = Path("backup_old_version")
    backup_dir.mkdir(exist_ok=True)
    
    # –§–∞–π–ª—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    old_files = [
        "api.py", "config.py", "data.py", "model.py", "env_crypto.py",
        "trade.py", "train_adaptive_model.py", "testnet_adaptive_bot.py",
        "requirements.txt", "README.md"
    ]
    
    for file in old_files:
        if os.path.exists(file):
            shutil.copy2(file, backup_dir / file)
            print(f"  ‚úÖ {file} -> backup_old_version/{file}")
    
    print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤: {backup_dir}")


def migrate_data_files():
    """–ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    data_dir = Path("data")
    data_dir.mkdir(exist_ok=True)
    
    # –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    data_files = [
        "btc_4h_full_fixed.csv",
        "adaptive_training_trades.csv",
        "temp_training_data.csv",
        "adaptive_scaler.pkl",
        "ppo_adaptive_model.zip"
    ]
    
    for file in data_files:
        if os.path.exists(file):
            shutil.move(file, data_dir / file)
            print(f"  ‚úÖ {file} -> data/{file}")
    
    print("üìÅ –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data/")


def create_env_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env –∏–∑ —Å—Ç–∞—Ä—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    print("üîê –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env...")
    
    env_content = """# API –∫–ª—é—á–∏ –¥–ª—è Bybit
# –ü–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ https://www.bybit.com/app/user/api-management
BYBIT_API_KEY=your_api_key_here
BYBIT_API_SECRET=your_api_secret_here

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TRADING_MODE=testnet  # testnet –∏–ª–∏ mainnet
LOG_LEVEL=INFO
"""
    
    with open(".env", "w", encoding="utf-8") as f:
        f.write(env_content)
    
    print("  ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env")
    print("  ‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à–∏ API –∫–ª—é—á–∏!")


def update_config_for_old_data():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("‚öôÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = "config/trading_config.yaml"
    if os.path.exists(config_path):
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
        if os.path.exists("data/btc_4h_full_fixed.csv"):
            config['data']['dataset_path'] = 'data/btc_4h_full_fixed.csv'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(config_path, 'w', encoding='utf-8') as f:
            yaml.dump(config, f, default_flow_style=False, allow_unicode=True)
        
        print("  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        print("  ‚ö†Ô∏è  –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")


def create_migration_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏ –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"""
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...")
    
    migration_script = '''#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏ –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent / "src"))

from src.utils.config import get_config
from src.utils.logging import setup_logging
from src.data.data_loader import DataLoader
from src.env.trading_env import OptimizedTradingEnv
from src.models.ppo_model import PPOModel


def run_old_model():
    """–ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏ –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = get_config('config/trading_config.yaml')
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger = setup_logging(config.logging, "migration")
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª–∏ –≤ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data_loader = DataLoader(config.data.__dict__)
        df = data_loader.load_historical_data()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ä–µ–¥—É
        env = OptimizedTradingEnv(
            df_path=config.data.dataset_path,
            trading_config=config.trading,
            data_config=config.data,
            logging_config=config.logging,
            log_trades_path='migrated_trades.csv'
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—É—é –º–æ–¥–µ–ª—å
        old_model_path = "data/ppo_adaptive_model.zip"
        if os.path.exists(old_model_path):
            model_config = config.model.__dict__.copy()
            model_config['model_path'] = old_model_path
            model = PPOModel(model_config)
            model.load(old_model_path)
            logger.info(f"‚úÖ –°—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {old_model_path}")
        else:
            logger.error(f"‚ùå –°—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {old_model_path}")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        obs, info = env.reset()
        logger.info(f"üöÄ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: Balance={info['balance']:.2f}")
        
        step = 0
        total_reward = 0
        
        while True:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            action = model.predict(obs)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥
            obs, reward, terminated, truncated, info = env.step(action)
            total_reward += reward
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 100 —à–∞–≥–æ–≤
            if step % 100 == 0:
                logger.info(f"Step {step}: Balance={info['balance']:.2f}, "
                          f"Position={info['position_size']:.4f}, "
                          f"Total Reward={total_reward:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if terminated or truncated:
                break
            
            step += 1
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:")
        logger.info(f"Total steps: {step}")
        logger.info(f"Total reward: {total_reward:.2f}")
        logger.info(f"Final balance: {info['balance']:.2f}")
        logger.info(f"Total profit: {info['total_profit']:.4f}")
        logger.info(f"Total trades: {len(info['trades'])}")
        
        if info['trades']:
            profitable_trades = sum(1 for trade in info['trades'] if trade > 0)
            win_rate = profitable_trades / len(info['trades']) * 100
            logger.info(f"Win rate: {win_rate:.1f}%")
        
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}", exc_info=True)


if __name__ == '__main__':
    run_old_model()
'''
    
    with open("run_migration.py", "w", encoding="utf-8") as f:
        f.write(migration_script)
    
    print("  ‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç run_migration.py")


def create_comparison_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–π"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
    
    comparison_script = '''#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–π
"""

import pandas as pd
import numpy as np
from pathlib import Path


def compare_performance():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–π")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
    old_log_path = "backup_old_version/adaptive_training_trades.csv"
    if Path(old_log_path).exists():
        print("\\nüìà –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏:")
        analyze_trades_log(old_log_path, "–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è")
    else:
        print("\\n‚ö†Ô∏è  –õ–æ–≥ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤
    new_log_path = "migrated_trades.csv"
    if Path(new_log_path).exists():
        print("\\nüìà –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏:")
        analyze_trades_log(new_log_path, "–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è")
    else:
        print("\\n‚ö†Ô∏è  –õ–æ–≥ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")


def analyze_trades_log(log_path, version_name):
    """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∞ —Å–¥–µ–ª–æ–∫"""
    
    try:
        df = pd.read_csv(log_path)
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_trades = len(df)
        profitable_trades = len(df[df['profit'] > 0])
        total_profit = df['profit'].sum()
        avg_profit = df['profit'].mean()
        
        print(f"  {version_name}:")
        print(f"    –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"    –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profitable_trades} ({profitable_trades/total_trades*100:.1f}%)")
        print(f"    –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.2f} USDT")
        print(f"    –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_profit:.2f} USDT")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –¥–µ–π—Å—Ç–≤–∏–π
        if 'action' in df.columns:
            action_counts = df['action'].value_counts()
            print(f"    –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π:")
            for action, count in action_counts.items():
                print(f"      {action}: {count} ({count/total_trades*100:.1f}%)")
        
        # –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ —Å–¥–µ–ª–∫–∏
        best_trade = df['profit'].max()
        worst_trade = df['profit'].min()
        print(f"    –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: {best_trade:.2f} USDT")
        print(f"    –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: {worst_trade:.2f} USDT")
        
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")


if __name__ == '__main__':
    compare_performance()
'''
    
    with open("compare_versions.py", "w", encoding="utf-8") as f:
        f.write(comparison_script)
    
    print("  ‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç compare_versions.py")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_old_files()
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        migrate_data_files()
        
        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
        create_env_file()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        update_config_for_old_data()
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
        create_migration_script()
        create_comparison_script()
        
        print("\\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª .env")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements_new.txt")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: python main.py --mode test")
        print("4. –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: python compare_versions.py")
        print("\\n‚ö†Ô∏è  –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ backup_old_version/")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")


if __name__ == '__main__':
    main()

