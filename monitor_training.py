#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
"""

import time
import pandas as pd
from pathlib import Path

def monitor_training():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
    print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—É—á–µ–Ω–∏—è... (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")

    last_timesteps = 0
    start_time = time.time()

    try:
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_file = Path("logs/progress.csv")
            if progress_file.exists():
                try:
                    # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
                    with open(progress_file, 'r') as f:
                        lines = f.readlines()
                        if len(lines) > 1:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                            last_line = lines[-1].strip()
                            parts = last_line.split(',')

                            if len(parts) >= 2:
                                timesteps = int(float(parts[0]))
                                elapsed_time = float(parts[1])

                                if timesteps > last_timesteps:
                                    progress_pct = (timesteps / 1000000) * 100
                                    fps = timesteps / elapsed_time if elapsed_time > 0 else 0

                                    print(f"–®–∞–≥–∏: {timesteps:>6d} | "
                                          f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_pct:>5.1f}% | "
                                          f"FPS: {fps:>3.0f} | "
                                          f"–í—Ä–µ–º—è: {elapsed_time:>4.1f} —Å–µ–∫")

                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                                    if len(parts) > 5:
                                        try:
                                            reward_mean = float(parts[5])
                                            ep_len_mean = float(parts[4]) if len(parts) > 4 else 0
                                            print(f"–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {reward_mean:>.2f} | –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–∞: {ep_len_mean:.0f}")
                                        except
                                            pass

                                    last_timesteps = timesteps

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    except KeyboardInterrupt:
        total_time = time.time() - start_time
        print("\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_time:.1f} —Å–µ–∫")
        if last_timesteps > 0:
            print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {last_timesteps} —à–∞–≥–æ–≤")
if __name__ == "__main__":
    monitor_training()
