#!/usr/bin/env python3
"""
–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è Bybit Testnet —Å –æ–±—É—á–µ–Ω–∏–µ–º –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
import time
import numpy as np
import pandas as pd
from stable_baselines3 import PPO
from stable_baselines3.common.vec_env import VecNormalize
from api import get_bybit_client
from data import get_ohlcv, add_indicators
from model import get_action
from trade import market_buy, market_sell
import logging
from config import SYMBOL, DATASET_PATH
from env_crypto import CustomCryptoTradingEnv
from sklearn.preprocessing import StandardScaler
import joblib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s', 
                   filename='testnet_adaptive_log.txt')

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
SYMBOL = 'BTCUSDT'
QTY = 0.1  # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ 200,000+ USDT
INTERVAL = '15'  # 15-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
LIMIT = 500  # –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
MODEL_PATH = 'ppo_crypto_model_best_improved.zip'

# –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
FEATURE_LIST = [
    'close', 'volume', 'rsi', 'ema_14', 'macd', 'atr', 'bb_bbm', 'adx', 'cci', 'roc', 'stoch',
    'crsi', 'sideways_volume', 'dist_to_support', 'dist_to_resistance', 'false_breakout', 
    'volume_spike', 'trend_ema', 'support', 'resistance', 'ema200_d1', 'atr_mult_trailing_stop'
]

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ä–µ–¥—ã
WINDOW_SIZE = 24
SL_PCT = 0.03
TP_PCT = 0.07

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
LEARNING_EPISODES = 1000  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
MIN_DATA_POINTS = 1000    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è

def get_ohlcv_from_bybit(client, symbol='BTCUSDT', interval='15', limit=200):
    """–ü–æ–ª—É—á–∞–µ—Ç OHLCV –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –ø—Ä—è–º–æ —Å Bybit"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º kline –¥–∞–Ω–Ω—ã–µ —Å Bybit
        response = client.get_kline(
            category="linear",
            symbol=symbol,
            interval=interval,
            limit=limit
        )
        
        if response['retCode'] != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response['retMsg']}")
            return None
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
        klines = response['result']['list']
        df = pd.DataFrame(klines, columns=[
            'start_time', 'open', 'high', 'low', 'close', 'volume', 'turnover'
        ])
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        df['open'] = df['open'].astype(float)
        df['high'] = df['high'].astype(float)
        df['low'] = df['low'].astype(float)
        df['close'] = df['close'].astype(float)
        df['volume'] = df['volume'].astype(float)
        df['turnover'] = df['turnover'].astype(float)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        df = df.sort_values('start_time').reset_index(drop=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df = add_indicators(df)
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —Å Bybit")
        return df
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Bybit: {e}")
        return None

def create_training_data(df):
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –º–µ—Ç–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—É–¥—É—â–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π —Ü–µ–Ω—ã"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±—É–¥—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–æ–∫
    df['future_price_1'] = df['close'].shift(-1)  # –¶–µ–Ω–∞ —á–µ—Ä–µ–∑ 1 –ø–µ—Ä–∏–æ–¥
    df['future_price_3'] = df['close'].shift(-3)  # –¶–µ–Ω–∞ —á–µ—Ä–µ–∑ 3 –ø–µ—Ä–∏–æ–¥–∞
    df['future_price_5'] = df['close'].shift(-5)  # –¶–µ–Ω–∞ —á–µ—Ä–µ–∑ 5 –ø–µ—Ä–∏–æ–¥–æ–≤
    df['future_price_10'] = df['close'].shift(-10)  # –¶–µ–Ω–∞ —á–µ—Ä–µ–∑ 10 –ø–µ—Ä–∏–æ–¥–æ–≤
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—É–¥—É—â–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π
    # 0 = –î–ï–†–ñ–ê–¢–¨, 1 = –ö–£–ü–ò–¢–¨, 2 = –ü–†–û–î–ê–¢–¨
    labels = []
    
    for i in range(len(df) - 10):  # –û—Å—Ç–∞–≤–ª—è–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ—á–µ–∫
        current_price = df.iloc[i]['close']
        future_1 = df.iloc[i]['future_price_1']
        future_3 = df.iloc[i]['future_price_3']
        future_5 = df.iloc[i]['future_price_5']
        future_10 = df.iloc[i]['future_price_10']
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        change_1 = (future_1 - current_price) / current_price if not pd.isna(future_1) else 0
        change_3 = (future_3 - current_price) / current_price if not pd.isna(future_3) else 0
        change_5 = (future_5 - current_price) / current_price if not pd.isna(future_5) else 0
        change_10 = (future_10 - current_price) / current_price if not pd.isna(future_10) else 0
        
        # –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–±–æ–ª—å—à–µ –≤–µ—Å–∞ –±–ª–∏–∂–∞–π—à–∏–º –ø–µ—Ä–∏–æ–¥–∞–º)
        weighted_change = (change_1 * 0.4 + change_3 * 0.3 + change_5 * 0.2 + change_10 * 0.1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        rsi = df.iloc[i]['rsi'] if not pd.isna(df.iloc[i]['rsi']) else 50
        macd = df.iloc[i]['macd'] if not pd.isna(df.iloc[i]['macd']) else 0
        volume = df.iloc[i]['volume'] if not pd.isna(df.iloc[i]['volume']) else 0
        avg_volume = df['volume'].rolling(20).mean().iloc[i] if not pd.isna(df['volume'].rolling(20).mean().iloc[i]) else volume
        ema_14 = df.iloc[i]['ema_14'] if not pd.isna(df.iloc[i]['ema_14']) else current_price
        atr = df.iloc[i]['atr'] if not pd.isna(df.iloc[i]['atr']) else current_price * 0.01
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        price_above_ema = current_price > ema_14
        macd_positive = macd > 0
        volume_spike = volume > avg_volume * 1.5
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        buy_signal = (
            weighted_change > 0.015 and  # –ú–∏–Ω–∏–º—É–º 1.5% —Ä–æ—Å—Ç–∞
            rsi < 75 and  # RSI –Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω
            price_above_ema and  # –¶–µ–Ω–∞ –≤—ã—à–µ EMA
            (macd_positive or volume_spike)  # MACD –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞
        )
        
        sell_signal = (
            weighted_change < -0.015 and  # –ú–∏–Ω–∏–º—É–º 1.5% –ø–∞–¥–µ–Ω–∏—è
            rsi > 25 and  # RSI –Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω
            (not price_above_ema or rsi > 70)  # –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA –∏–ª–∏ RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω
        )
        
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        if buy_signal and not sell_signal:
            labels.append(1)  # –ö–£–ü–ò–¢–¨
        elif sell_signal and not buy_signal:
            labels.append(2)  # –ü–†–û–î–ê–¢–¨
        else:
            labels.append(0)  # –î–ï–†–ñ–ê–¢–¨
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –≤ DataFrame
    df['label'] = [0] * (len(df) - len(labels)) + labels
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(labels)} –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤")
    print(f"   - –ü–æ–∫—É–ø–∫–∏: {labels.count(1)} ({labels.count(1)/len(labels)*100:.1f}%)")
    print(f"   - –ü—Ä–æ–¥–∞–∂–∏: {labels.count(2)} ({labels.count(2)/len(labels)*100:.1f}%)")
    print(f"   - –£–¥–µ—Ä–∂–∞–Ω–∏—è: {labels.count(0)} ({labels.count(0)/len(labels)*100:.1f}%)")
    
    return df

def train_model_on_historical_data(df, model_path=None):
    """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    df_train = create_training_data(df.copy())
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    train_data = df_train.dropna()
    
    if len(train_data) < MIN_DATA_POINTS:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {len(train_data)} < {MIN_DATA_POINTS}")
        return None
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –º–µ—Ç–∫–∏
    X = train_data[FEATURE_LIST].values
    y = train_data['label'].values
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ä–µ–¥—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
    temp_data_path = 'temp_training_data.csv'
    train_data.to_csv(temp_data_path, index=False)
    
    env = CustomCryptoTradingEnv(
        df_path=temp_data_path,
        window_size=WINDOW_SIZE,
        sl_pct=SL_PCT,
        tp_pct=TP_PCT,
        symbol=SYMBOL,
        use_trend_filter=False,
        rf_enabled=False,
        log_trades_path='adaptive_training_trades.csv'
    )
    
    env.reset()
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    if model_path and os.path.exists(model_path):
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å: {model_path}")
        model = PPO.load(model_path)
    else:
        print("üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å")
        model = PPO('MlpPolicy', env, verbose=1)
    
    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ {LEARNING_EPISODES} —ç–ø–∏–∑–æ–¥–∞—Ö...")
    model.learn(total_timesteps=LEARNING_EPISODES * 100)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    adaptive_model_path = 'ppo_adaptive_model.zip'
    model.save(adaptive_model_path)
    print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {adaptive_model_path}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä
    scaler_path = 'adaptive_scaler.pkl'
    joblib.dump(scaler, scaler_path)
    print(f"üíæ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {scaler_path}")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if os.path.exists(temp_data_path):
        os.remove(temp_data_path)
        print(f"üóëÔ∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_data_path}")
    
    return model, scaler

def train_new_model(client):
    """–û–±—É—á–∞–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüì° –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
        df_historical = pd.read_csv(DATASET_PATH)
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç: {DATASET_PATH}")
        print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: {len(df_historical)} —Å—Ç—Ä–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        if 'rsi' not in df_historical.columns:
            print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
            df_historical = add_indicators(df_historical)
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        model, scaler = train_model_on_historical_data(df_historical)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
        print("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Bybit...")
        df_historical = get_ohlcv_from_bybit(client, symbol=SYMBOL, interval=INTERVAL, limit=LIMIT)
        if df_historical is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Bybit")
            return None, None
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(df_historical)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
        model, scaler = train_model_on_historical_data(df_historical)
    
    return model, scaler

def make_env():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ä–µ–¥—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    return CustomCryptoTradingEnv(
        df_path=DATASET_PATH,
        window_size=WINDOW_SIZE,
        sl_pct=SL_PCT,
        tp_pct=TP_PCT,
        symbol=SYMBOL,
        use_trend_filter=False,
        rf_enabled=False,
        log_trades_path='testnet_adaptive_trades.csv'
    )

def check_wallet_balance(client):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        balance = client.get_wallet_balance(accountType="UNIFIED", coin="USDT")
        if balance['retCode'] == 0:
            usdt_balance = float(balance['result']['list'][0]['coin'][0]['walletBalance'])
            return usdt_balance
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {balance['retMsg']}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    print("ü§ñ –ê–î–ê–ü–¢–ò–í–ù–´–ô –¢–û–†–ì–û–í–´–ô –ë–û–¢ –î–õ–Ø BYBIT TESTNET")
    print("=" * 70)
    print("üß† –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö + —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è")
    print("üìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–æ—Å—Ç–∞/–ø–∞–¥–µ–Ω–∏—è –∏ –æ–±—ä–µ–º–æ–≤")
    print("üîí Testnet - —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –ù–ï –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
    print("=" * 70)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Bybit –¥–ª—è testnet
    client = get_bybit_client(testnet=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –±–∞–ª–∞–Ω—Å
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –±–∞–ª–∞–Ω—Å–∞...")
    usdt_balance = check_wallet_balance(client)
    if usdt_balance is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏.")
        return
    
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ testnet —É—Å–ø–µ—à–Ω–æ!")
    print(f"üí∞ –ë–∞–ª–∞–Ω—Å UNIFIED USDT: {usdt_balance}")
    
    simulation_mode = False
    if usdt_balance == 0:
        print("‚ö†Ô∏è  –í UNIFIED –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤!")
        print("üí° –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ —Å –æ–±—É—á–µ–Ω–∏–µ–º")
        usdt_balance = 10000  # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
        simulation_mode = True
    else:
        print(f"‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {usdt_balance} USDT")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    adaptive_model_path = 'ppo_adaptive_model.zip'
    scaler_path = 'adaptive_scaler.pkl'
    
    if os.path.exists(adaptive_model_path) and os.path.exists(scaler_path):
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å: {adaptive_model_path}")
        try:
            model = PPO.load(adaptive_model_path)
            scaler = joblib.load(scaler_path)
            print("‚úÖ –ú–æ–¥–µ–ª—å –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—É—á–µ–Ω–∏—é –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏...")
            model, scaler = train_new_model(client)
    else:
        print("üÜï –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—É—á–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å...")
        model, scaler = train_new_model(client)
    
    if model is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ä–µ–¥—É –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    env = make_env()
    obs, info = env.reset()
    
    print(f"\nüìä –°—Ä–µ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞: {env.df.shape[0]:,} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
    print(f"üéØ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {env.balance}")
    
    total_trades = 0
    successful_trades = 0
    total_profit = 0.0
    
    print(f"\nüöÄ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    if simulation_mode:
        print("üéÆ –†–ï–ñ–ò–ú –°–ò–ú–£–õ–Ø–¶–ò–ò - —Ä–µ–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 70)
    
    iteration = 0
    start_time = time.time()
    
    while True:
        try:
            iteration += 1
            print(f"\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration} - {time.strftime('%H:%M:%S')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å Bybit
            print("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Bybit...")
            df_current = get_ohlcv_from_bybit(client, symbol=SYMBOL, interval=INTERVAL, limit=LIMIT)
            
            if df_current is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Bybit, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é")
                time.sleep(60)
                continue
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
            state = df_current.tail(WINDOW_SIZE)[FEATURE_LIST].values
            state_scaled = scaler.transform(state)
            state_scaled = np.expand_dims(state_scaled, axis=0)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            action = get_action(model, state_scaled)
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"üîç –ê–Ω–∞–ª–∏–∑:")
            print(f"   - –¶–µ–Ω–∞: {df_current.iloc[-1]['close']:.2f}")
            print(f"   - RSI: {df_current.iloc[-1]['rsi']:.2f}")
            print(f"   - MACD: {df_current.iloc[-1]['macd']:.4f}")
            print(f"   - –û–±—ä–µ–º: {df_current.iloc[-1]['volume']:.0f}")
            print(f"   - –î–µ–π—Å—Ç–≤–∏–µ: {action} ({'–î–ï–†–ñ–ê–¢–¨' if action == 0 else '–ö–£–ü–ò–¢–¨' if action == 1 else '–ü–†–û–î–ê–¢–¨'})")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å—Ä–µ–¥–µ
            obs, reward, done, _, info = env.step([action])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            balance = info.get('balance', None)
            position_size = info.get('position_size', None)
            avg_entry_price = info.get('avg_entry_price', None)
            drawdown = info.get('drawdown', 0)
            trade_count = info.get('trade_count', 0)
            total_profit = info.get('total_profit', 0)
            
            # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            print(f'üìä –ë–∞–ª–∞–Ω—Å: {balance:.4f} | –ü–æ–∑–∏—Ü–∏—è: {position_size:.6f} | '
                  f'–í—Ö–æ–¥: {avg_entry_price:.2f} | –ü—Ä–æ—Å–∞–¥–∫–∞: {drawdown*100:.1f}% | '
                  f'–°–¥–µ–ª–∫–∞ #{trade_count} | –ü—Ä–∏–±—ã–ª—å: {total_profit:.4f}')
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ testnet (–µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏)
            if not simulation_mode:
                if action == 1:  # –ü–æ–∫—É–ø–∫–∞
                    logging.info('–°–∏–≥–Ω–∞–ª: –ö–£–ü–ò–¢–¨')
                    print('üü¢ –°–∏–≥–Ω–∞–ª: –ö–£–ü–ò–¢–¨')
                    result = market_buy(client, SYMBOL, QTY)
                    if result:
                        total_trades += 1
                        successful_trades += 1
                        print(f'‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}')
                    else:
                        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏')
                        
                elif action == 2:  # –ü—Ä–æ–¥–∞–∂–∞
                    logging.info('–°–∏–≥–Ω–∞–ª: –ü–†–û–î–ê–¢–¨')
                    print('üî¥ –°–∏–≥–Ω–∞–ª: –ü–†–û–î–ê–¢–¨')
                    result = market_sell(client, SYMBOL, QTY)
                    if result:
                        total_trades += 1
                        successful_trades += 1
                        print(f'‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞! –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}')
                    else:
                        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏')
                        
                else:  # –£–¥–µ—Ä–∂–∞–Ω–∏–µ
                    logging.info('–°–∏–≥–Ω–∞–ª: –î–ï–†–ñ–ê–¢–¨')
                    print('‚è∏Ô∏è  –°–∏–≥–Ω–∞–ª: –î–ï–†–ñ–ê–¢–¨')
            else:
                # –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏
                action_names = {0: '–î–ï–†–ñ–ê–¢–¨', 1: '–ö–£–ü–ò–¢–¨', 2: '–ü–†–û–î–ê–¢–¨'}
                print(f'üéÆ –°–∏–º—É–ª—è—Ü–∏—è: {action_names[action]}')
                if action in [1, 2]:
                    total_trades += 1
                    successful_trades += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –∏—Ç–µ—Ä–∞—Ü–∏–π
            if iteration % 5 == 0:
                elapsed_time = time.time() - start_time
                hours = elapsed_time // 3600
                minutes = (elapsed_time % 3600) // 60
                
                print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {int(hours)}—á {int(minutes)}–º):")
                print(f"   –ò—Ç–µ—Ä–∞—Ü–∏–π: {iteration}")
                print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
                print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_trades}")
                if total_trades > 0:
                    success_rate = (successful_trades / total_trades) * 100
                    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
                print(f"   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.4f}")
                print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.4f}")
                print("=" * 70)
            
            # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            print(f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏...")
            time.sleep(60)
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            break
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}')
            print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
            time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    elapsed_time = time.time() - start_time
    hours = elapsed_time // 3600
    minutes = (elapsed_time % 3600) // 60
    
    print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 70)
    print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {int(hours)}—á {int(minutes)}–º")
    print(f"   –ò—Ç–µ—Ä–∞—Ü–∏–π: {iteration}")
    print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_trades}")
    if total_trades > 0:
        success_rate = (successful_trades / total_trades) * 100
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance:.4f}")
    print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.4f}")
    print("=" * 70)
    print("üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:")
    print("   - testnet_adaptive_log.txt")
    print("   - testnet_adaptive_trades.csv")

if __name__ == '__main__':
    main()
