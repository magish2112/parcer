#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è Bybit Testnet —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é PPO
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–æ–≤–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –ø–∏—Ä–∞–º–∏–¥–∏–Ω–≥–∞ –∏ –≤—ã—Ö–æ–¥–æ–≤ –∏–∑ –ø–æ–∑–∏—Ü–∏–π
"""

import os
import time
import numpy as np
import pandas as pd
from stable_baselines3 import PPO
from dotenv import load_dotenv
from pybit.unified_trading import HTTP
import logging
from datetime import datetime
import yaml

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
import sys
sys.path.append('src')
try:
    from data.indicators import add_indicators
except ImportError:
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    import src.data.indicators as indicators_module
    add_indicators = indicators_module.add_indicators

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—Ç–∞ –∂–µ, —á—Ç–æ –∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏)
with open('config/improved_trading_config.yaml', 'r') as f:
    config = yaml.safe_load(f)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
SYMBOL = 'BTCUSDT'
QTY_BASE = 0.01  # –£–í–ï–õ–ò–ß–ï–ù–ù–´–ô –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (0.01 BTC –¥–ª—è ~1000 USDT)
INTERVAL = '240'  # 4H —Å–≤–µ—á–∏ (–∫–∞–∫ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏!)
WINDOW_SIZE = 24  # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
MODEL_PATH = 'new_improved_ppo_model.zip'

# –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ BTCUSDT (–±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
CONTRACT_SPECS = {
    'min_order_qty': 0.001,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    'qty_step': 0.001,       # –®–∞–≥ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(message)s',
    handlers=[
        logging.FileHandler('testnet_improved_log.txt'),
        logging.StreamHandler()
    ]
)

class BybitTestnetBot:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è Bybit Testnet"""

    def __init__(self, model_path=None, testnet=True):
        self.model_path = model_path or MODEL_PATH
        self.testnet = testnet
        self.client = None
        self.model = None
        self.position_active = False
        self.entry_levels = []
        self.position_size = 0.0
        self.avg_entry_price = 0.0
        self.total_invested = 0.0

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∏—Ä–∞–º–∏–¥–∏–Ω–≥–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π)
        self.pyramid_levels = [0.10, 0.20, 0.50]  # 10%, 20%, 50% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
        self.pyramid_thresholds = [0.05, 0.08, 0.08]  # –ü—Ä–æ—Å–∞–¥–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        self.current_level = 0
        self.drawdown_max = 0.0

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã—Ö–æ–¥–∞
        self.profit_target_single = 0.03  # 3% –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        self.profit_target_multi = 0.05   # 5% –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π

        self.setup_client()
        self.load_model()

    def setup_client(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ Bybit"""
        try:
            api_key = os.getenv('BYBIT_API_KEY')
            api_secret = os.getenv('BYBIT_API_SECRET')

            if not api_key or not api_secret:
                raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã API –∫–ª—é—á–∏ BYBIT_API_KEY –∏–ª–∏ BYBIT_API_SECRET")

            self.client = HTTP(
                api_key=api_key,
                api_secret=api_secret,
                testnet=self.testnet
            )
            logging.info("–ö–ª–∏–µ–Ω—Ç Bybit –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print("–ö–ª–∏–µ–Ω—Ç Bybit –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ Bybit: {e}")
            raise

    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ PPO"""
        try:
            if not os.path.exists(self.model_path):
                raise FileNotFoundError(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.model_path}")

            self.model = PPO.load(self.model_path)
            logging.info(f"–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {self.model_path}")
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {self.model_path}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            raise

    def get_contract_specs(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ BTCUSDT"""
        try:
            response = self.client.get_instruments_info(
                category="spot",
                symbol=SYMBOL
            )

            if response['retCode'] == 0:
                contract = response['result']['list'][0]

                # –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                logging.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {list(contract.keys())}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π –≤ –æ—Ç–≤–µ—Ç–µ
                min_order_qty = contract.get('minOrderQty') or contract.get('minQty') or '0.001'
                qty_step = contract.get('qtyStep') or contract.get('stepSize') or '0.001'

                logging.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: minOrderQty={min_order_qty}, qtyStep={qty_step}")

                specs = {
                    'min_order_qty': float(min_order_qty),
                    'qty_step': float(qty_step),
                    'max_order_qty': float(contract.get('maxOrderQty', 100.0)),
                }

                logging.info(f"–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ {SYMBOL}:")
                logging.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {specs['min_order_qty']}")
                logging.info(f"   –®–∞–≥ —Ä–∞–∑–º–µ—Ä–∞: {specs['qty_step']}")
                logging.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {specs['max_order_qty']}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                global CONTRACT_SPECS
                CONTRACT_SPECS.update(specs)

                return specs
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {response['retMsg']}")
                logging.error(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: {response}")
                return CONTRACT_SPECS
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            return CONTRACT_SPECS

    def round_qty_to_contract_specs(self, qty):
        """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"""
        try:
            min_qty = CONTRACT_SPECS['min_order_qty']
            qty_step = CONTRACT_SPECS['qty_step']

            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º
            if qty < min_qty:
                return min_qty

            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —à–∞–≥–∞
            rounded_qty = round(qty / qty_step) * qty_step

            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞
            rounded_qty = max(rounded_qty, min_qty)

            return rounded_qty

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
            return max(qty, CONTRACT_SPECS['min_order_qty'])

    def save_trading_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
        try:
            state = {
                'position_active': self.position_active,
                'position_size': self.position_size,
                'avg_entry_price': self.avg_entry_price,
                'total_invested': self.total_invested,
                'entry_levels': self.entry_levels,
                'current_level': self.current_level,
                'drawdown_max': self.drawdown_max,
                'timestamp': datetime.now().isoformat()
            }

            import json
            with open('trading_state.json', 'w') as f:
                json.dump(state, f, indent=2)

            logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ trading_state.json")
            print("üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def load_trading_state(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            import json
            if os.path.exists('trading_state.json'):
                with open('trading_state.json', 'r') as f:
                    state = json.load(f)

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.position_active = state.get('position_active', False)
                self.position_size = state.get('position_size', 0.0)
                self.avg_entry_price = state.get('avg_entry_price', 0.0)
                self.total_invested = state.get('total_invested', 0.0)
                self.entry_levels = state.get('entry_levels', [])
                self.current_level = state.get('current_level', 0)
                self.drawdown_max = state.get('drawdown_max', 0.0)

                timestamp = state.get('timestamp', 'N/A')
                logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ {timestamp}")
                print(f"üìÇ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ {timestamp}")

                return True
            else:
                logging.info("–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
                return False

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return False

    def get_wallet_balance(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ (USDT + BTC)"""
        try:
            balance = self.client.get_wallet_balance(
                accountType="UNIFIED",  # –î–ª—è testnet –Ω—É–∂–µ–Ω UNIFIED
                coin="USDT,BTC"
            )
            if balance['retCode'] == 0:
                coins = balance['result']['list'][0]['coin']

                usdt_balance = 0.0
                btc_balance = 0.0

                for coin in coins:
                    if coin['coin'] == 'USDT':
                        usdt_balance = float(coin['walletBalance'])
                    elif coin['coin'] == 'BTC':
                        btc_balance = float(coin['walletBalance'])

                return {
                    'usdt': usdt_balance,
                    'btc': btc_balance,
                    'total_usdt': usdt_balance + (btc_balance * 100000)  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤ USDT
                }
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {balance['retMsg']}")
                return None
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return None

    def get_market_data(self, limit=100):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Bybit"""
        try:
            response = self.client.get_kline(
                category="spot",
                symbol=SYMBOL,
                interval=INTERVAL,
                limit=limit
            )

            if response['retCode'] != 0:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response['retMsg']}")
                return None

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
            klines = response['result']['list']
            df = pd.DataFrame(klines, columns=[
                'start_time', 'open', 'high', 'low', 'close',
                'volume', 'turnover'
            ])

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∏–ø–æ–≤
            for col in ['open', 'high', 'low', 'close', 'volume', 'turnover']:
                df[col] = df[col].astype(float)

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            df = df.sort_values('start_time').reset_index(drop=True)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            df = self.add_indicators(df)

            return df

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    def add_indicators(self, df):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –æ–±—É—á–µ–Ω–∏–µ–º)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ä–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, —á—Ç–æ –∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
            df_with_indicators = add_indicators(df.copy(), config['data'])
            return df_with_indicators

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return df

    def prepare_observation(self, df):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏"""
        try:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ WINDOW_SIZE —Å–≤–µ—á–µ–π
            recent_data = df.tail(WINDOW_SIZE)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–¢ –ñ–ï –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, —á—Ç–æ –∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ (24 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            features = config['data']['feature_list']

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            obs_data = recent_data[features].values

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ NaN –∑–Ω–∞—á–µ–Ω–∏–π
            obs_data = np.nan_to_num(obs_data, nan=0.0)

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            obs_mean = np.mean(obs_data, axis=0)
            obs_std = np.std(obs_data, axis=0)
            obs_std = np.where(obs_std == 0, 1, obs_std)  # –ò–∑–±–µ–≥–∞–Ω–∏–µ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0

            obs_normalized = (obs_data - obs_mean) / obs_std

            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ñ–æ—Ä–º–µ (WINDOW_SIZE, WINDOW_SIZE)
            window_size = WINDOW_SIZE
            n_features = obs_normalized.shape[1]

            # –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logging.info(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: shape={obs_normalized.shape}, mean={obs_normalized.mean():.4f}, std={obs_normalized.std():.4f}")

            if n_features < window_size:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–ª–∏ —Å–ø—Ä–∞–≤–∞
                padding = np.zeros((window_size, window_size - n_features))
                obs_matrix = np.column_stack([obs_normalized, padding])
            else:
                # –û–±—Ä–µ–∑–∞–µ–º –¥–æ window_size
                obs_matrix = obs_normalized[:, :window_size]

            logging.info(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: shape={obs_matrix.shape}, range=[{obs_matrix.min():.4f}, {obs_matrix.max():.4f}]")
            return obs_matrix.astype(np.float32)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è: {e}")
            return np.zeros((WINDOW_SIZE, WINDOW_SIZE), dtype=np.float32)

    def get_model_action(self, observation):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç –º–æ–¥–µ–ª–∏"""
        try:
            # –ú–æ–¥–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç —Ñ–æ—Ä–º—É (batch_size, height, width)
            obs_expanded = np.expand_dims(observation, axis=0)

            # –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ö–æ–¥ –º–æ–¥–µ–ª–∏
            logging.info(f"–í—Ö–æ–¥ –º–æ–¥–µ–ª–∏: shape={obs_expanded.shape}, mean={obs_expanded.mean():.4f}, std={obs_expanded.std():.4f}")

            # –£–ë–ò–†–ê–ï–ú deterministic=True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –º–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            action, _ = self.model.predict(obs_expanded, deterministic=False)

            logging.info(f"–î–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ–ª–∏: {action}")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ int
            if isinstance(action, np.ndarray):
                if action.ndim == 0:
                    action = int(action.item())
                elif action.size > 0:
                    action = int(action[0])
                else:
                    action = 0
            else:
                action = int(action)

            return action

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç –º–æ–¥–µ–ª–∏: {e}")
            return 0  # –î–ï–†–ñ–ê–¢–¨ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def calculate_position_size(self, balance, price, drawdown):
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π Bybit"""
        try:
            if self.current_level >= len(self.pyramid_levels):
                return 0.0  # –í—Å–µ —É—Ä–æ–≤–Ω–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            threshold = self.pyramid_thresholds[self.current_level] if self.current_level > 0 else 0.0

            if self.current_level == 0 or drawdown >= threshold:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
                level_percentage = self.pyramid_levels[self.current_level]

                # –î–ª—è —Ç–µ—Å—Ç–Ω–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                logging.info(f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {self.current_level}, –ø—Ä–æ—Ü–µ–Ω—Ç —É—Ä–æ–≤–Ω—è: {level_percentage*100:.0f}%")
                logging.info(f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT, —Ü–µ–Ω–∞: {price:.2f}")

                if self.current_level == 0:
                    # –î–ª—è —Ç–µ—Å—Ç–Ω–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É 1000 USDT –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    position_value_usdt = 1000.0  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ 1000 USDT
                    logging.info(f"–ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (—Ç–µ—Å—Ç–Ω–µ—Ç —Ñ–∏–∫—Å): {position_value_usdt:.2f} USDT")
                else:
                    position_value_usdt = balance * level_percentage
                    logging.info(f"–ü–æ—Å–ª–µ–¥—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {position_value_usdt:.2f} USDT")

                position_size = position_value_usdt / price

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                position_size = max(position_size, 0.001)  # –ú–∏–Ω–∏–º—É–º 0.001 BTC
                position_size = self.round_qty_to_contract_specs(position_size)
                position_value_usdt = position_size * price

                logging.info(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –æ–∫—Ä—É–≥–ª–µ–Ω –¥–æ: {position_size:.4f} BTC (–º–∏–Ω. —Å—Ç–æ–∏–º–æ—Å—Ç—å: {position_value_usdt:.2f} USDT)")

                logging.info(f"–£—Ä–æ–≤–µ–Ω—å {self.current_level + 1}: {level_percentage*100:.0f}% –¥–µ–ø–æ–∑–∏—Ç–∞")
                return position_size
            else:
                return 0.0  # –£—Å–ª–æ–≤–∏—è –¥–ª—è —É—Ä–æ–≤–Ω—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return 0.0

    def execute_buy(self, qty):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏: qty={qty}, symbol={SYMBOL}")
            print(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É: {qty} BTC...")

            result = self.client.place_order(
                category="spot",
                symbol=SYMBOL,
                side="Buy",
                orderType="Market",
                qty=str(qty),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                timeInForce="GoodTillCancel"
            )

            logging.info(f"–û—Ç–≤–µ—Ç API: {result}")

            if result['retCode'] == 0:
                order_id = result.get('result', {}).get('orderId', 'N/A')
                logging.info(f"–ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: orderId={order_id}, qty={qty} {SYMBOL}")
                print(f"–ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {qty} BTC (orderId: {order_id})")
                return True
            else:
                error_code = result.get('retCode', 'N/A')
                error_msg = result.get('retMsg', 'N/A')
                logging.error(f"–û—à–∏–±–∫–∞ API –ø–æ–∫—É–ø–∫–∏: code={error_code}, message={error_msg}")
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {error_msg} (–∫–æ–¥: {error_code})")
                return False

        except Exception as e:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ Unicode —Å–∏–º–≤–æ–ª–æ–≤
            safe_error_msg = str(e).replace('‚Üí', '->').replace('‚Üí', '->')
            logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {safe_error_msg}")
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: {safe_error_msg}")
            return False

    def execute_sell(self, qty):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏"""
        try:
            result = self.client.place_order(
                category="spot",
                symbol=SYMBOL,
                side="Sell",
                orderType="Market",
                qty=str(qty),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                timeInForce="GoodTillCancel"
            )

            if result['retCode'] == 0:
                logging.info(f"–ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {qty:.6f} {SYMBOL}")
                print(f"–ü—Ä–æ–¥–∞–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {qty:.6f} {SYMBOL}")
                return True
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {result['retMsg']}")
                return False

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏: {e}")
            return False

    def check_exit_conditions(self, current_price):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not self.position_active or self.position_size == 0:
                return False

            # –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π –ø—Ä–∏–±—ã–ª–∏
            current_profit_pct = (current_price - self.avg_entry_price) / self.avg_entry_price

            # –£—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞
            if self.current_level == 0:
                # –û–¥–Ω–∞ –ø–æ–∑–∏—Ü–∏—è - –≤—ã—Ö–æ–¥ –ø—Ä–∏ 3% –ø—Ä–æ—Ñ–∏—Ç–∞
                if current_profit_pct >= self.profit_target_single:
                    logging.info(f"üéØ –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: –ø—Ä–æ—Ñ–∏—Ç {current_profit_pct:.2f}% (1 —É—Ä–æ–≤–µ–Ω—å)")
                    return True
            else:
                # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ - –≤—ã—Ö–æ–¥ –ø—Ä–∏ 5% –ø—Ä–æ—Ñ–∏—Ç–∞
                if current_profit_pct >= self.profit_target_multi:
                    logging.info(f"üéØ –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: –ø—Ä–æ—Ñ–∏—Ç {current_profit_pct:.2f}% (–º–Ω–æ–≥–æ —É—Ä–æ–≤–Ω–µ–π)")
                    return True

            return False

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞: {e}")
            return False

    def update_drawdown(self, current_price):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏"""
        try:
            if self.position_active and self.position_size > 0:
                current_profit_pct = (current_price - self.avg_entry_price) / self.avg_entry_price
                if current_profit_pct < 0:
                    self.drawdown_max = max(self.drawdown_max, abs(current_profit_pct))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–∞–¥–∫–∏: {e}")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        print("üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ì–û –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê BYBIT TESTNET")
        print("=" * 80)
        print("üéØ –°–ü–æ—Ç–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è BTCUSDT –Ω–∞ Bybit Testnet")
        print("üéØ –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø–∏—Ä–∞–º–∏–¥–∏–Ω–≥–∞: 10% -> 20% -> 50%")
        print("üí∞ –í—ã—Ö–æ–¥ –≤ –±–µ–∑—É–±—ã—Ç–æ–∫: 3% (1 —É—Ä–æ–≤–µ–Ω—å) / 5% (–º–Ω–æ–≥–æ —É—Ä–æ–≤–Ω–µ–π)")
        print("üõ°Ô∏è –û—Ç–∫–ª—é—á–µ–Ω—ã —Ä–∞–Ω–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã")
        print("=" * 80)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...")
        contract_specs = self.get_contract_specs()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        balance_info = self.get_wallet_balance()
        if balance_info is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
            return

        usdt_balance = balance_info['usdt']
        btc_balance = balance_info['btc']
        total_balance = balance_info['total_usdt']

        print(f"üí∞ –ë–∞–ª–∞–Ω—Å:")
        print(f"   USDT: {usdt_balance:.2f}")
        print(f"   BTC: {btc_balance:.6f}")
        print(f"   –û–±—â–∏–π: ~{total_balance:.2f} USDT")
        print(f"üìä –ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print(f"   –ú–∏–Ω. —Ä–∞–∑–º–µ—Ä: {contract_specs['min_order_qty']}")
        print(f"   –®–∞–≥ —Ä–∞–∑–º–µ—Ä–∞: {contract_specs['qty_step']}")

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
        state_loaded = self.load_trading_state()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        if not state_loaded:
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if btc_balance > 0.0001:  # –ï—Å—Ç—å BTC –ø–æ–∑–∏—Ü–∏—è
                self.position_active = True
                self.position_size = btc_balance
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
                df = self.get_market_data(limit=10)
                if df is not None:
                    current_price = df.iloc[-1]['close']
                    self.avg_entry_price = current_price  # –ü—Ä–∏–º–µ—Ä–Ω–æ, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
                    self.total_invested = btc_balance * self.avg_entry_price
                    print(f"üìä –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è BTC: {btc_balance:.6f} –Ω–∞ —Ü–µ–Ω–µ ~{self.avg_entry_price:.2f}")
                else:
                    print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–∑–∏—Ü–∏–∏")
                    return
            else:
                print("üéØ –ü–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏")
                self.position_active = False
        else:
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
            if abs(self.position_size - btc_balance) > 0.00001:
                logging.warning(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {self.position_size:.6f}, —Ä–µ–∞–ª—å–Ω–æ {btc_balance:.6f}")
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –±–∞–ª–∞–Ω—Å—É
                self.position_size = btc_balance
                if btc_balance > 0.0001:
                    self.position_active = True
                    if self.avg_entry_price > 0:
                        self.total_invested = btc_balance * (self.total_invested / self.position_size)
                else:
                    self.position_active = False

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º USDT –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        balance = usdt_balance
        if balance < 100:
            print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫")
            # –ù–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å BTC –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

        total_trades = 0
        successful_trades = 0
        iteration = 0
        start_time = time.time()
        max_runtime = 24 * 60 * 60  # –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞ —Ä–∞–±–æ—Ç—ã
        daily_stats_interval = 60  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

        try:
            while True:
                iteration += 1
                current_time = datetime.now().strftime('%H:%M:%S')

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
                elapsed_time = time.time() - start_time
                if elapsed_time > max_runtime:
                    print(f"\n‚è∞ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ ({max_runtime/60:.1f} –º–∏–Ω—É—Ç)")
                    break

                print(f"\nüîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è #{iteration} - {current_time}")

                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                df = self.get_market_data(limit=100)
                if df is None or len(df) < WINDOW_SIZE:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    time.sleep(60)
                    continue

                current_price = df.iloc[-1]['close']

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏
                observation = self.prepare_observation(df)

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç –º–æ–¥–µ–ª–∏
                action = self.get_model_action(observation)

                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–π—Å—Ç–≤–∏–∏ –º–æ–¥–µ–ª–∏
                action_names = {0: '–î–ï–†–ñ–ê–¢–¨', 1: '–ö–£–ü–ò–¢–¨', 2: '–ü–†–û–î–ê–¢–¨'}
                print(f"ü§ñ –ú–æ–¥–µ–ª—å —Ä–µ—à–∏–ª–∞: {action} ({action_names[action]})")
                logging.info(f"–ú–æ–¥–µ–ª—å —Ä–µ—à–∏–ª–∞: {action} ({action_names[action]})")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                if len(df) > 0:
                    last_row = df.iloc[-1]
                    print(f"üìä RSI: {last_row.get('rsi', 'N/A'):.1f} | MACD: {last_row.get('macd', 'N/A'):.4f} | "
                          f"–û–±—ä–µ–º: {last_row.get('volume', 0):.0f}")

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å–∞–¥–∫–∏
                self.update_drawdown(current_price)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞
                if self.check_exit_conditions(current_price):
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å—é –ø–æ–∑–∏—Ü–∏—é
                    if self.execute_sell(self.position_size):
                        total_trades += 1
                        successful_trades += 1

                        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏
                        profit_usdt = self.total_invested * (current_price - self.avg_entry_price) / self.avg_entry_price

                        print("üéâ –í–´–•–û–î –ò–ó –ü–û–ó–ò–¶–ò–ò:")
                        print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {self.avg_entry_price:.2f}")
                        print(f"   –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {current_price:.2f}")
                        print(f"   –ü—Ä–æ—Å–∞–¥–∫–∞ –º–∞–∫—Å: {self.drawdown_max:.1f}%")
                        print(f"   –ü—Ä–∏–±—ã–ª—å: {profit_usdt:.2f} USDT")
                        print("=" * 50)

                    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
                    self.position_active = False
                    self.entry_levels = []
                    self.position_size = 0.0
                    self.avg_entry_price = 0.0
                    self.total_invested = 0.0
                    self.current_level = 0
                    self.drawdown_max = 0.0

                    continue

                # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
                if action == 1:  # –ú–æ–¥–µ–ª—å –¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –ö–£–ü–ò–¢–¨
                    if not self.position_active:  # –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é
                        print("üü¢ –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò –û–¢ –ú–û–î–ï–õ–ò - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é")
                        logging.info("–°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò –û–¢ –ú–û–î–ï–õ–ò - –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")

                        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
                        qty = self.calculate_position_size(balance, current_price, self.drawdown_max)
                        logging.info(f"–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {qty:.6f} BTC –ø—Ä–∏ —Ü–µ–Ω–µ {current_price:.2f}")

                        if qty > 0:
                            # –û–∫—Ä—É–≥–ª—è–µ–º qty —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                            qty_rounded = self.round_qty_to_contract_specs(qty)
                            logging.info(f"–û–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {qty_rounded:.4f} BTC")
                            print(f"üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {qty:.6f} BTC -> {qty_rounded:.4f} BTC (—Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É)")

                            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å –∫–æ–º–∏—Å—Å–∏–µ–π
                            position_cost = qty_rounded * current_price
                            commission_cost = position_cost * 0.001  # 0.1% –∫–æ–º–∏—Å—Å–∏—è
                            total_cost = position_cost + commission_cost

                            print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏: {position_cost:.2f} USDT")
                            print(f"üí∞ –ö–æ–º–∏—Å—Å–∏—è –≤—Ö–æ–¥–∞: {commission_cost:.2f} USDT")
                            print(f"üí∞ –ò—Ç–æ–≥–æ: {total_cost:.2f} USDT")

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤
                            if total_cost > balance:
                                logging.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {total_cost:.2f} > {balance:.2f}")
                                print(f"‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏: {total_cost:.2f} > {balance:.2f}")
                            elif qty_rounded < CONTRACT_SPECS['min_order_qty']:
                                logging.error(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ {qty_rounded:.4f} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {CONTRACT_SPECS['min_order_qty']}")
                                print(f"‚ö†Ô∏è  –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π: {qty_rounded:.4f} < {CONTRACT_SPECS['min_order_qty']}")
                            else:
                                print(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É {qty_rounded:.4f} BTC...")
                                if self.execute_buy(qty_rounded):
                                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                                    self.position_active = True
                                    self.entry_levels.append(current_price)
                                    self.position_size = qty_rounded  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                                    self.avg_entry_price = current_price
                                    self.total_invested = total_cost  # –í–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é
                                    total_trades += 1
                                    successful_trades += 1

                                    logging.info(f"–ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê: {qty_rounded:.4f} BTC –ø–æ —Ü–µ–Ω–µ {current_price:.2f}")
                                    print("–ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê:")
                                    print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {current_price:.2f}")
                                    print(f"   –†–∞–∑–º–µ—Ä: {qty_rounded:.4f} BTC")
                                    print(f"   –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {self.total_invested:.2f} USDT (—Å –∫–æ–º–∏—Å—Å–∏–µ–π)")
                                    print("=" * 40)
                                else:
                                    logging.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏")
                                    print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")
                        else:
                            logging.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")
                            print("‚è∏Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ —É—Å–ª–æ–≤–∏—è –ø–∏—Ä–∞–º–∏–¥–∏–Ω–≥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                    else:  # –ï—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
                        logging.info("–°–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞")
                        print("üü¢ –°–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏, –Ω–æ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")

                elif action == 2:  # –ú–æ–¥–µ–ª—å –¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –ü–†–û–î–ê–¢–¨
                    if self.position_active:  # –ï—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è - –∑–∞–∫—Ä—ã–≤–∞–µ–º
                        print("üî¥ –°–ò–ì–ù–ê–õ –ü–†–û–î–ê–ñ–ò –û–¢ –ú–û–î–ï–õ–ò - –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é")

                        # –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
                        commission_rate = 0.001  # 0.1% –∫–æ–º–∏—Å—Å–∏—è
                        potential_profit_pct = (current_price - self.avg_entry_price) / self.avg_entry_price
                        commission_cost = self.total_invested * commission_rate * 2  # –í—Ö–æ–¥ + –≤—ã—Ö–æ–¥
                        net_profit_usdt = self.total_invested * potential_profit_pct - commission_cost
                        net_profit_pct = net_profit_usdt / self.total_invested

                        print(f"üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–∞–∂–∏:")
                        print(f"   –¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å: {potential_profit_pct:.4f}%")
                        print(f"   –ö–æ–º–∏—Å—Å–∏—è: {commission_cost:.2f} USDT")
                        print(f"   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit_pct:.4f}% ({net_profit_usdt:.2f} USDT)")

                        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –ø—Ä–∏–±—ã–ª–∏ 0.5% –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π
                        min_profit_threshold = 0.005  # 0.5%

                        if net_profit_pct >= min_profit_threshold:
                            print(f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –≤—ã–≥–æ–¥–Ω–∞ (–ø—Ä–∏–±—ã–ª—å > {min_profit_threshold*100:.1f}%)")
                            # –û–∫—Ä—É–≥–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                            sell_qty = min(self.round_qty_to_contract_specs(self.position_size),
                                         self.round_qty_to_contract_specs(balance_info['btc']))

                            if sell_qty != self.position_size:
                                print(f"üìä –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–¥–∞–∂–∏: {self.position_size:.6f} -> {sell_qty:.4f}")

                            if self.execute_sell(sell_qty):
                                total_trades += 1
                                successful_trades += 1

                                print("–ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê –ü–û –°–ò–ì–ù–ê–õ–£:")
                                print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {self.avg_entry_price:.2f}")
                                print(f"   –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {current_price:.2f}")
                                print(f"   –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {potential_profit_pct:.4f}%")
                                print(f"   –ö–æ–º–∏—Å—Å–∏—è: {commission_cost:.2f} USDT")
                                print(f"   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit_pct:.4f}% ({net_profit_usdt:.2f} USDT)")
                                print("=" * 40)

                                # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
                                self.position_active = False
                                self.entry_levels = []
                                self.position_size = 0.0
                                self.avg_entry_price = 0.0
                                self.total_invested = 0.0
                                self.current_level = 0
                                self.drawdown_max = 0.0
                            else:
                                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏")
                        else:
                            print(f"‚è∏Ô∏è –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–≤—ã–≥–æ–¥–Ω–∞ (–ø—Ä–∏–±—ã–ª—å < {min_profit_threshold*100:.1f}%) - –∂–¥–µ–º –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π")
                            logging.info(f"–ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å {net_profit_pct:.4f}% < {min_profit_threshold*100:.1f}%")
                    else:  # –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏
                        print("üî¥ –°–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏, –Ω–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")

                else:  # –°–∏–≥–Ω–∞–ª –î–ï–†–ñ–ê–¢–¨
                    print("‚è∏Ô∏è  –î–ï–†–ñ–ê–¢–¨ –ø–æ–∑–∏—Ü–∏—é")

                    if self.position_active:
                        current_profit_pct = (current_price - self.avg_entry_price) / self.avg_entry_price
                        print(f"   –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {current_profit_pct:.2f}%")
                        print(f"   –ü—Ä–æ—Å–∞–¥–∫–∞ –º–∞–∫—Å: {self.drawdown_max:.1f}%")
                        print(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {self.position_size:.4f} BTC")
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
                elapsed_time = time.time() - start_time
                if iteration % daily_stats_interval == 0 or iteration == 1:
                    hours = elapsed_time // 3600
                    minutes = (elapsed_time % 3600) // 60

                    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê ({int(hours)}—á {int(minutes)}–º):")
                    print(f"   –ò—Ç–µ—Ä–∞—Ü–∏–π: {iteration}")
                    print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
                    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_trades}")
                    if total_trades > 0:
                        success_rate = (successful_trades / total_trades) * 100
                        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –ø—Ä–∏–±—ã–ª—å
                        print(f"   –í—Å–µ–≥–æ –ø—Ä–∏–±—ã–ª—å: ~{total_trades * 5:.2f} USDT (–æ—Ü–µ–Ω–∫–∞)")

                    print(f"   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}")
                    if self.position_active:
                        current_profit_pct = (current_price - self.avg_entry_price) / self.avg_entry_price
                        print(f"   –ü–æ–∑–∏—Ü–∏—è: {self.position_size:.4f} BTC")
                        print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: {self.avg_entry_price:.2f}")
                        print(f"   –¢–µ–∫—É—â–∏–π P&L: {current_profit_pct:.2f}%")
                        print(f"   –ü—Ä–æ—Å–∞–¥–∫–∞ –º–∞–∫—Å: {self.drawdown_max:.1f}%")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥—ã–π —á–∞—Å
                    if iteration % daily_stats_interval == 0:
                        current_balance = self.get_wallet_balance()
                        if current_balance:
                            print(f"   –ë–∞–ª–∞–Ω—Å USDT: {current_balance['usdt']:.2f}")
                            print(f"   –ë–∞–ª–∞–Ω—Å BTC: {current_balance['btc']:.6f}")

                    print("=" * 80)

                # –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
                print("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã...")
                time.sleep(60)

        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            self.save_trading_state()
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.save_trading_state()

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        elapsed_time = time.time() - start_time
        hours = elapsed_time // 3600
        minutes = (elapsed_time % 3600) // 60

        print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 80)
        print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {int(hours)}—á {int(minutes)}–º")
        print(f"   –ò—Ç–µ—Ä–∞—Ü–∏–π: {iteration}")
        print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {successful_trades}")
        if total_trades > 0:
            success_rate = (successful_trades / total_trades) * 100
            print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        print(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {current_price:.2f}")
        print("=" * 80)
        print("üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: testnet_improved_log.txt")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏
    if not os.path.exists(MODEL_PATH):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {MODEL_PATH}")
        print("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é: python main_improved.py --mode train")
        return

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = BybitTestnetBot(model_path=MODEL_PATH)
    bot.run()


if __name__ == '__main__':
    main()
